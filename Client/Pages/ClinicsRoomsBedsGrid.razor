@page "/rooms"
@using HospitalAdmissionApp.Shared.DTOs
@inject HttpClient Http
@inject NotificationService NotificationSvc


<PageTitle>Rooms</PageTitle>

<h1>Rooms</h1>

@if (isLoading)
{
    <em>Loading ...</em>
}
else
{
    <div class="row">
        <div class="col-md-4 col-offset-4 col-sm-12">
            <RadzenLabel Text="Select Clinic" Component="DropDownBindValue" />
            <RadzenDropDown TValue="int?" Data="@clinics" @ref="clinicsGrid" @bind-Value="@selectedClinicId" Change="@(async (args) => await ActivateRoomsGrid())"
                            ValueProperty="@(nameof(Clinic_GridDTO.Id))" TextProperty="@nameof(Clinic_GridDTO.Name)" />
        </div>
    </div>
    <br />
    <div>
        <RadzenDataGrid @ref="roomsGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" RowRender="@RowRender" ExpandMode="@expandMode"
                        Data="@rooms" TItem="RoomDetails_DTO">
            <Template Context="room">
                <RadzenDataGrid TItem="RoomDetails_DTO" Data="rooms" AllowSorting="true" AllowColumnResize="true">
                    <Columns>
                        <RadzenDataGridColumn TItem="RoomDetails_DTO" Property="@nameof(RoomDetails_DTO.BedInfo)" Title="Bed information" />
                        <RadzenDataGridColumn TItem="RoomDetails_DTO" Property="@nameof(RoomDetails_DTO.PatientId)" Title="Patient Name">
                            <Template Context="pDTO">
                                @($"{pDTO.PatientName} {pDTO.PatientSurname}")
                                <RadzenLink Text="@($"{pDTO.PatientName} {pDTO.PatientSurname}")" Path=@($"patientDetails/{pDTO.PatientId}") />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="RoomDetails_DTO" Property="@nameof(RoomDetails_DTO.DiseaseName)" Title="Disease" />
                    </Columns>
                </RadzenDataGrid>
            </Template>
            <Columns>
                <RadzenDataGridColumn TItem="RoomDetails_DTO" Title="Room number" Property="@nameof(RoomDetails_DTO.RoomNumber)" />
                <RadzenDataGridColumn TItem="RoomDetails_DTO" Title="Occupied" Property="@nameof(RoomDetails_DTO.Occupied)" />
            </Columns>
        </RadzenDataGrid>
    </div>
}


@code {
    private bool isLoading;

    private RadzenDropDown<int?> clinicsGrid;
    private Clinic_GridDTO[] clinics;
    private int? selectedClinicId;

    private RadzenDataGrid<RoomDetails_DTO> roomsGrid;
    private RoomDetails_DTO[] rooms;


    [Parameter]
    public RenderFragment<object> DisplayTemplate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        clinics = await Http.GetFromJsonAsync<Clinic_GridDTO[]>("api/clinics");

        isLoading = false;

    }

    private async Task ActivateRoomsGrid()
    {
        if (selectedClinicId.HasValue)
        {
            rooms = await Http.GetFromJsonAsync<RoomDetails_DTO[]>($"api/rooms/roomDetails?c={selectedClinicId.Value}");
            StateHasChanged();
        }
    }

    DataGridExpandMode expandMode = DataGridExpandMode.Single;
    bool? allRowsExpanded;

    async Task ToggleRowsExpand(bool? value)
    {
        allRowsExpanded = value;

        if (value == true)
        {
            await roomsGrid.ExpandRows(roomsGrid.PagedView);
        }
        else if (value == false)
        {
            await roomsGrid.CollapseRows(roomsGrid.PagedView);
        }
    }


    void RowRender(RowRenderEventArgs<RoomDetails_DTO> room)
    {
        room.Expandable = room.Expandable;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            await roomsGrid.ExpandRow(rooms.FirstOrDefault());
        }
    }
}
