@page "/PatientDetails/{Id:int}"
@using HospitalAdmissionApp.Client.components
@using HospitalAdmissionApp.Shared.DTOs

@inject HttpClient Http
@inject NotificationService NotificationSvc
@inject DialogService DlgService
@inject NavigationManager NavMan
@inject TooltipService TooltipSvc

<PageTitle>Patient Details</PageTitle>

<h1>Patient Details</h1>

@if (DTO == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <RadzenTabs TItem="Patient_DetailsDTO" Data="@DTO">
        <Tabs>
            <RadzenTabsItem Text="Main">
                <div class="row">
                    <div class="col-md-2 offset-md-1 col-sm-12">
                        Name:
                    </div>
                    <div class="col-md-9 col-sm-12">
                        @DTO.Name
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2 offset-md-1 col-sm-12">
                        Surname:
                    </div>
                    <div class="col-md-9 col-sm-12">
                        @DTO.Surname
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2 offset-md-1 col-sm-12">
                        Identity card:
                    </div>
                    <div class="col-md-9 col-sm-12">
                        @DTO.PatientIdentityCard
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2 offset-md-1 col-sm-12">
                        Date of birth:
                    </div>
                    <div class="col-md-9 col-sm-12">
                        @DTO.DateOfBirth
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2 offset-md-1 col-sm-12">
                        Age:
                    </div>
                    <div class="col-md-9 col-sm-12">
                        @DTO.Age
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2 offset-md-1 col-sm-12">
                        Sex:
                    </div>
                    <div class="col-md-9 col-sm-12">
                        @DTO.SexText
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2 offset-md-1 col-sm-12">
                        Insurance class:
                    </div>
                    <div class="col-md-9 col-sm-12">
                        @DTO.InsuranceText
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 col-sm-12">
                        Patient details:
                    </div>
                    <div class="col-md-12 col-sm-12">
                        @DTO.PatientDetails
                    </div>
                </div>
                <br />
                <RadzenButton Icon="add_circle_outline" Text="Edit Patient" ButtonStyle="ButtonStyle.Primary" Click="@(async (args) => await Edit())" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Admission history">
                <RadzenDataGrid @ref="@grid" AllowFiltering="@true" AllowSorting="@true" AllowColumnResize="@true" PageSize="10" AllowPaging="@true" ColumnWidth="100px"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple" PagerHorizontalAlign="HorizontalAlign.Center"
                                Data="@DTO.History" TItem="PatientHistory_GridDTO">
                    <Columns>
                        <RadzenDataGridColumn TItem="PatientHistory_GridDTO" Title="Room Number" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(PatientHistory_GridDTO.RoomNumber))" />
                        <RadzenDataGridColumn TItem="PatientHistory_GridDTO" Title="Admission Date" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(PatientHistory_GridDTO.AdmissionDate))"
                                              FormatString="{0:d MMM yy}" />
                        <RadzenDataGridColumn TItem="PatientHistory_GridDTO" Title="Dismiss Date" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(PatientHistory_GridDTO.ReleaseDate))"
                                              FormatString="{0:d MMM yy}" />
                        <RadzenDataGridColumn TItem="PatientHistory_GridDTO" Title="Disease" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(PatientHistory_GridDTO.DiseaseName))" />
                    </Columns>
                </RadzenDataGrid>
                <br />
                <RadzenButton Icon="danger" Text="Dismiss Patient" ButtonStyle="ButtonStyle.Primary" Click="@(async (args) => await Dismiss())" />
            </RadzenTabsItem>

            <br />
        </Tabs>
    </RadzenTabs>

}
@code
{
    [Parameter]
    public int Id { get; set; }

    private Patient_DetailsDTO DTO;

    private RadzenDataGrid<PatientHistory_GridDTO> grid;

    protected override async Task OnInitializedAsync()
    {
        DTO = await Http.GetFromJsonAsync<Patient_DetailsDTO>($"api/patients/{Id}");
    }

    private async Task Edit()
    {
        var dto = new Patient_EditDTO();

        var dlgParams = new Dictionary<string, object>()
        {
            {"DTO", dto},
            {"IsNew", false },
        };

        var res = await DlgService.OpenAsync<Dlg_PatientEdit>(
            "Add patient",
            dlgParams,
            new DialogOptions() { Width = "1000px", Height = "800px" }
        );
    }

    private async Task Dismiss()
    {
        var currSlot = new SlotSelection_DTO();
        currSlot.PatientId = DTO.Id;
        currSlot.Id = DTO.History.First(p => p.ReleaseDate == null).Id;
        currSlot.BedId = DTO.History.First(p => p.ReleaseDate == null).BedId;
        currSlot.DiseaseId = DTO.History.First(p => p.ReleaseDate == null).DiseaseId;

        var res = await Http.PutAsJsonAsync<SlotSelection_DTO>($"api/Patients/DismissPatient", currSlot);

        if (!res.IsSuccessStatusCode)
        {
            var errMsg = await res.Content.ReadAsStringAsync();
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Saving failed",
                errMsg,
                8000);
            Console.WriteLine($"Save error: {errMsg}");
        }
        else
        {
            DlgService.Close(true);
            DTO = await Http.GetFromJsonAsync<Patient_DetailsDTO>($"api/patients/{Id}");
            StateHasChanged();

        }
    }
}
