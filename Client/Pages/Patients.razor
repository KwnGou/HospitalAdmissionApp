@page "/patients"
@using HospitalAdmissionApp.Client.components
@using HospitalAdmissionApp.Shared.DTOs
@inject HttpClient Http
@inject NotificationService NotificationSvc
@inject DialogService DlgService
@inject NavigationManager NavMan

<PageTitle>Patients</PageTitle>

<h1>Patients</h1>

@if (patients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid @ref="@grid" AllowFiltering="@true" AllowSorting="@true" AllowColumnResize="@true" PageSize="10" AllowPaging="@true" ColumnWidth="100px"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple" PagerHorizontalAlign="HorizontalAlign.Center"
                    Data="@patients" TItem="Patient_GridDTO">
        <Columns>
            <RadzenDataGridColumn TItem="Patient_GridDTO" Title="Name" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(Patient_GridDTO.Name))" />
            <RadzenDataGridColumn TItem="Patient_GridDTO" Title="Surname" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(Patient_GridDTO.Surname))" />
            <RadzenDataGridColumn TItem="Patient_GridDTO" Title="Hospitalized?" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(Patient_GridDTO.Hospitalized))" >
                <Template Context="dto">
                    @if (dto.Hospitalized)
                    {
                        <span style="color:darkgreen;font-weight:bold">Yes</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Patient_GridDTO" Title="Identity Card" TextAlign="TextAlign.Left" Filterable="@true" Property="@(nameof(Patient_GridDTO.PatientIdentityCard))">
                <Template Context="dto">
                    <RadzenLink Text="@dto.PatientIdentityCard" Path=@($"patientDetails/{dto.Id}") />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Patient_GridDTO" Filterable="@false" Sortable="@false" TextAlign="TextAlign.Center">
                <Template Context="dto">
                    <RadzenButton Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Click="@(async (args) => await Delete(dto))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <br />
    <RadzenButton Icon="add_circle_outline" Text="Add New Patient" ButtonStyle="ButtonStyle.Success" Click="@(async(args) => Add())" />
}

@code
{
    private RadzenDataGrid<Patient_GridDTO> grid;
    private Patient_GridDTO[] patients;
    private PatientSelection_DTO[] patientsForAdmission;

    protected override async Task OnInitializedAsync()
    {
        patients = await Http.GetFromJsonAsync<Patient_GridDTO[]>("api/Patients");
    }


    private async Task Add()
    {
        var dto = new Patient_EditDTO();

        var dlgParams = new Dictionary<string, object>()
        {
            {"DTO", dto},
            {"IsNew", true },
            {"RediredtToAdmit", false}
        };

        var res = await DlgService.OpenAsync<Dlg_PatientEdit>(
            "Add patient",
            dlgParams,
            new DialogOptions() { Width = "1000px", Height = "800px" }
        );
    }

    private async Task Details(int id)
    {

        NavMan.NavigateTo($"patientDetails/{id}");

    }

    private async Task Delete(Patient_GridDTO dto)
    {
        var res = await Http.DeleteAsync($"api/patients/{dto.Id}");

        if (!res.IsSuccessStatusCode)
        {
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Deletion failed",
                await res.Content.ReadAsStringAsync(),
                8000);
        }
        else
        {
            patients = await Http.GetFromJsonAsync<Patient_GridDTO[]>("api/patients");
            await grid.Reload();
        }

    }
}
