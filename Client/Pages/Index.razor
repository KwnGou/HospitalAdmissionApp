@page "/"
@using HospitalAdmissionApp.Client.components
@using HospitalAdmissionApp.Shared.DTOs
@inject HttpClient Http
@inject NotificationService NotificationSvc
@inject DialogService DlgService
@inject NavigationManager NavMan

<PageTitle>Admission Page</PageTitle>

<h1>Admission Page</h1>

@if (isLoading)
{
    <em>Loading ...</em>
}
else
{

    <div class="row">
        <div class="col-md-3 col-sm-12">
            Patients for admission
        </div>
        <div class="col-md-9 col-sm-12">
            <RadzenDropDownDataGrid TValue="int?" Data="@patientsForAdmission" @bind-Value="@selectedPatientId" ValueProperty="@nameof(PatientSelection_DTO.Id)"
                                    AllowColumnResize="true" AllowFilteringByAllStringColumns="true" AllowClear="@true" Change="@(async(args) => await DeactivateBedsGrid())">
                <ValueTemplate Context="pDTO">
                    @($"{pDTO.Name} {pDTO.Surname}")
                </ValueTemplate>
                <Columns>
                    <RadzenDropDownDataGridColumn Property="@nameof(PatientSelection_DTO.Name)" Title="Name" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="@nameof(PatientSelection_DTO.Surname)" Title="Surname" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="@nameof(PatientSelection_DTO.PatientIdentityCard)" Title="Identity Card" Width="100px" />
                </Columns>
            </RadzenDropDownDataGrid>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-3 col-sm-12">
            Select disease
        </div>
        <div class="col-md-9 col-sm-12">
            <RadzenDropDown TValue="int?" Data="@diseases" @bind-SelectedItem="@selectedDisease" @bind-Value="@selectedDiseaseId"
                            ValueProperty="@(nameof(Disease_GridDTO.Id))" TextProperty="@nameof(Disease_GridDTO.Name)" Change="@(async(args) => await DeactivateBedsGrid())" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-3 col-sm-12">
            Allow downgrade?
        </div>
        <div class="col-md-9 col-sm-12">
            <RadzenSwitch Name="downgradeSwitch" @bind-Value="downgradeBool" Change="@(args => OnChange(args, "down"))" />
        </div>

        <RadzenButton Icon="add_circle_outline" Text="Show available beds" ButtonStyle="ButtonStyle.Success" Click="@(async(args) => await ActivateBedsGrid())" />
    </div>
    <br />
    <div class="row">
        <div class="col-md-9 col-sm-12">
            <RadzenDropDownDataGrid TValue="int?" Data="@availableBeds" @bind-Value="@selectedBedId" ValueProperty="@nameof(Bed_GridDTO.BedId)" @ref="@bedGrid"
                                    AllowColumnResize="true" AllowFilteringByAllStringColumns="true" Visible="patientAndDisease" OpenOnFocus="@true">
                <ValueTemplate Context="bDTO">
                    @($"{bDTO.RoomNumber} {bDTO.BedInfo}")
                </ValueTemplate>
                <Columns>
                    <RadzenDropDownDataGridColumn Property="@nameof(Bed_GridDTO.RoomNumber)" Title="Room" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="@nameof(Bed_GridDTO.BedInfo)" Title="Bed" Width="200px" />
                </Columns>
            </RadzenDropDownDataGrid>

        </div>
    </div>
    <br />
    <RadzenButton Icon="add_circle_outline" Text="Admit patient" ButtonStyle="ButtonStyle.Success" Click="@(async(args) => await Admit())" />
    <RadzenButton Icon="add_circle_outline" Text="Add New Patient" ButtonStyle="ButtonStyle.Success" Click="@(async(args) => await Add())" />
}
@code
{
    private bool isLoading;
    private bool patientAndDisease = false;

    private bool downgradeBool;

    public PatientSelection_DTO[] patientsForAdmission;
    public PatientSelection_DTO selectedPatient;
    public int? selectedPatientId;

    private Disease_GridDTO[] diseases;
    private object selectedDisease;
    private int? selectedDiseaseId;

    public Bed_GridDTO[] availableBeds;
    public Bed_GridDTO selectedBed;
    public int? selectedBedId;

    private RadzenDropDownDataGrid<int?> bedGrid;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        patientsForAdmission = await Http.GetFromJsonAsync<PatientSelection_DTO[]>("api/Patients/patientsForAdmission");
        diseases = await Http.GetFromJsonAsync<Disease_GridDTO[]>("api/Diseas");

        downgradeBool = true;

        isLoading = false;
        StateHasChanged();
    }

    private async Task ActivateBedsGrid()
    {
        if (selectedDiseaseId.HasValue && selectedPatientId.HasValue)
        {
            patientAndDisease = true;
            availableBeds = await Http.GetFromJsonAsync<Bed_GridDTO[]>($"api/Beds/AvailableBedsForPatient?p={selectedPatientId}&d={selectedDiseaseId}&downgrade={downgradeBool}");
            await bedGrid.FocusAsync();
            StateHasChanged();
        }
    }

    private async Task DeactivateBedsGrid()
    {
        patientAndDisease = false;
    }

    private async Task Add()
    {
        var dto = new Patient_EditDTO();

        var dlgParams = new Dictionary<string, object>()
        {
            {"DTO", dto},
            {"IsNew", true },
        };

        var res = await DlgService.OpenAsync<Dlg_PatientEdit>(
            "Add patient",
            dlgParams,
            new DialogOptions() { Width = "1000px", Height = "800px" }
        );
    }

    void OnChange(bool? downgradeBool, string downgradeSwitch)
    {
        NotificationSvc.Notify(NotificationSeverity.Info, "Downgrade", (downgradeBool.HasValue && downgradeBool.Value) ? "Downgrade allowed" : "Downgrade NOT allowed");
    }

    private async Task Admit()
    {

        HttpResponseMessage res;
        var dto = new SlotSelection_DTO();
        if (selectedPatientId.HasValue && selectedBedId.HasValue && selectedDiseaseId.HasValue)
        {
            dto.PatientId = selectedPatientId.Value;
            dto.BedId = selectedBedId.Value;
            dto.DiseaseId = selectedDiseaseId.Value;
            Console.WriteLine("bed id " + dto.BedId + "slot id " + dto.Id);
        }

        res = await Http.PostAsJsonAsync<SlotSelection_DTO>("api/Patients/AdmitPatient", dto);

        if (!res.IsSuccessStatusCode)
        {
            var errMsg = await res.Content.ReadAsStringAsync();
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Saving failed",
                errMsg,
                8000);
            Console.WriteLine($"Save error: {errMsg}");
        }
        else
        {
            StateHasChanged();
            DlgService.Close(true);
        }

    }
}