@page "/patientForm"
@using HospitalAdmissionApp.Shared.DTOs
@inject HttpClient Http
@inject DialogService DialogSvc
@inject NotificationService NotificationSvc
@inject NavigationManager NavMan

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="DTO" TItem="Patient_EditDTO" Submit="@(async (args) => await Save(DTO))">
        <RadzenStack TItem="Patient_EditDTO" Data="@DTO">
            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-4 offset-md-4 col-sm-12">
                        <div>Name </div>
                            <RadzenTextBox @bind-Value="DTO.Name" Name="Patient Name" />
                            @DTO.Name
                        
                    </div>
                    <div class="col-sm-4 col-sm-12">
                        <RadzenFormField Text="Surname">
                            <RadzenTextBox @bind-Value="DTO.Surname" Name="Patient Surname" />
                            @DTO.Surname
                        </RadzenFormField>
                    </div>
                </div>
            </div>
            <br />
            <div class="col-md-12">
                <div class="row">
                    <div>
                        <RadzenFormField Text="Date of birth" />
                        <RadzenDatePicker TValue="DateTime" DateFormat="d MM yy" Max="@(DateTime.Today)"
                                          @bind-Value="@DTO.DateOfBirth" />
                    </div>
                </div>
                <div class="row">
                    <div>
                        <RadzenFormField Text="Sex" />
                        <RadzenDropDown @bind-Value=@DTO.Sex TValue="string" Name="DropDownBindValue" />
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <RadzenFormField Text="Insurance">
                    <RadzenRadioButtonList @bind-Value=@DTO.Insurance TValue="int">
                        <Items>
                            <RadzenRadioButtonListItem Text="1" Value="1" />
                            <RadzenRadioButtonListItem Text="2" Value="2" />
                            <RadzenRadioButtonListItem Text="3" Value="3" />
                            @DTO.Insurance
                        </Items>
                    </RadzenRadioButtonList>
                </RadzenFormField>
            </div>
            <br />
            <div class="col-md-12">
                <div class="row">
                    <RadzenFormField Text="Patient Details">
                        <RadzenTextArea @bind-Value="@DTO.PatientDetails" Name="Patient Details" Style="width: 100%; height: 300px" />
                        @DTO.PatientDetails
                    </RadzenFormField>
                </div>
            </div>
        </RadzenStack>
        <div class="row position-absolute bottom-0 end-0 p-2">
            <div class="col-12">
                <RadzenButton ButtonType="ButtonType.Button" Icon="check" Text="Ok"
                              Click="@(async (args) => await Proceed(DTO))" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel"
                              Click="@((args) => DialogSvc.Close(false))" />
            </div>
        </div>
    </RadzenTemplateForm>
}
@code {
    private bool isLoading;

    [Parameter]
    public Patient_EditDTO DTO { get; set; }

    private Patient_DetailsDTO[] patients;

    [Parameter]
    public bool IsNew { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        patients = await Http.GetFromJsonAsync<Patient_DetailsDTO[]>("api/patients");
        isLoading = false;
        StateHasChanged();

    }

    private async Task Save(Patient_EditDTO dto)
    {
        HttpResponseMessage res;
        if (IsNew)
        {
            res = await Http.PostAsJsonAsync<Patient_EditDTO>("api/patients", dto);
        }
        else
        {
            res = await Http.PutAsJsonAsync<Patient_EditDTO>($"api/plates/{dto.Id}", dto);
        }

        if (!res.IsSuccessStatusCode)
        {
            var errMsg = await res.Content.ReadAsStringAsync();
            NotificationSvc.Notify(
                NotificationSeverity.Error,
                "Saving failed",
                errMsg,
                8000);
            Console.WriteLine($"Save error: {errMsg}");
        }
        else
        {
            DialogSvc.Close(true);
            if (IsNew)
            {
                var newPatient = await res.Content.ReadFromJsonAsync<Patient_DetailsDTO>();
                NavMan.NavigateTo($"patients/{newPatient.Id}");
            }

        }
    }

    private async Task Proceed(Patient_EditDTO dto)
    {

        DialogSvc.Close(DTO);
    }

    private async Task DeletePatient(Patient_DetailsDTO patDto)
    {

    }
}
